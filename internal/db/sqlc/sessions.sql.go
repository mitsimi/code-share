// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package db

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    id,
    user_id,
    token,
    refresh_token,
    expires_at
) VALUES (
    ?, ?, ?, ?, ?
) RETURNING id, user_id, token, refresh_token, expires_at, created_at
`

type CreateSessionParams struct {
	ID           string `json:"id"`
	UserID       string `json:"user_id"`
	Token        string `json:"token"`
	RefreshToken string `json:"refresh_token"`
	ExpiresAt    int64  `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.queryRow(ctx, q.createSessionStmt, createSession,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM sessions
WHERE expires_at < unixepoch()
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.exec(ctx, q.deleteExpiredSessionsStmt, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE token = ?
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.exec(ctx, q.deleteSessionStmt, deleteSession, token)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, token, refresh_token, expires_at, created_at FROM sessions
WHERE token = ? LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, token string) (Session, error) {
	row := q.queryRow(ctx, q.getSessionStmt, getSession, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateSessionExpiry = `-- name: UpdateSessionExpiry :exec
UPDATE sessions
SET expires_at = ?,
    refresh_token = ?
WHERE token = ?
`

type UpdateSessionExpiryParams struct {
	ExpiresAt    int64  `json:"expires_at"`
	RefreshToken string `json:"refresh_token"`
	Token        string `json:"token"`
}

func (q *Queries) UpdateSessionExpiry(ctx context.Context, arg UpdateSessionExpiryParams) error {
	_, err := q.exec(ctx, q.updateSessionExpiryStmt, updateSessionExpiry, arg.ExpiresAt, arg.RefreshToken, arg.Token)
	return err
}
