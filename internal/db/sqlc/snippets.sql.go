// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: snippets.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createSnippet = `-- name: CreateSnippet :one
INSERT INTO snippets (
    id,
    title,
    content,
    language,
    author
) VALUES (
    ?, ?, ?, ?, ?
)
RETURNING id, title, language, content, author, created_at, updated_at, likes, views
`

type CreateSnippetParams struct {
	ID       string `json:"id"`
	Title    string `json:"title"`
	Content  string `json:"content"`
	Language string `json:"language"`
	Author   string `json:"author"`
}

func (q *Queries) CreateSnippet(ctx context.Context, arg CreateSnippetParams) (Snippet, error) {
	row := q.queryRow(ctx, q.createSnippetStmt, createSnippet,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Language,
		arg.Author,
	)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Language,
		&i.Content,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Likes,
		&i.Views,
	)
	return i, err
}

const deleteSnippet = `-- name: DeleteSnippet :exec
DELETE FROM snippets
WHERE id = ?
`

func (q *Queries) DeleteSnippet(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteSnippetStmt, deleteSnippet, id)
	return err
}

const getSnippet = `-- name: GetSnippet :one
SELECT 
    s.id, s.title, s.language, s.content, s.author, s.created_at, s.updated_at, s.likes, s.views,
    CASE WHEN us.user_id IS NOT NULL THEN 1 ELSE 0 END as is_saved,
    CASE WHEN ul.user_id IS NOT NULL THEN 1 ELSE 0 END as is_liked,
    u.id AS author_id, 
    u.username AS author_username, 
    u.email AS author_email,
    u.avatar AS author_avatar
FROM snippets s
LEFT JOIN user_saves us ON s.id = us.snippet_id AND us.user_id = ?1
LEFT JOIN user_likes ul ON s.id = ul.snippet_id AND ul.user_id = ?1
LEFT JOIN users u ON s.author = u.id
WHERE s.id = ?2
`

type GetSnippetParams struct {
	UserID    string `json:"user_id"`
	SnippetID string `json:"snippet_id"`
}

type GetSnippetRow struct {
	ID             string         `json:"id"`
	Title          string         `json:"title"`
	Language       string         `json:"language"`
	Content        string         `json:"content"`
	Author         string         `json:"author"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	Likes          int64          `json:"likes"`
	Views          int64          `json:"views"`
	IsSaved        int64          `json:"is_saved"`
	IsLiked        int64          `json:"is_liked"`
	AuthorID       sql.NullString `json:"author_id"`
	AuthorUsername sql.NullString `json:"author_username"`
	AuthorEmail    sql.NullString `json:"author_email"`
	AuthorAvatar   sql.NullString `json:"author_avatar"`
}

func (q *Queries) GetSnippet(ctx context.Context, arg GetSnippetParams) (GetSnippetRow, error) {
	row := q.queryRow(ctx, q.getSnippetStmt, getSnippet, arg.UserID, arg.SnippetID)
	var i GetSnippetRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Language,
		&i.Content,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Likes,
		&i.Views,
		&i.IsSaved,
		&i.IsLiked,
		&i.AuthorID,
		&i.AuthorUsername,
		&i.AuthorEmail,
		&i.AuthorAvatar,
	)
	return i, err
}

const getSnippets = `-- name: GetSnippets :many
SELECT 
    s.id, s.title, s.language, s.content, s.author, s.created_at, s.updated_at, s.likes, s.views,
    CASE WHEN us.user_id IS NOT NULL THEN 1 ELSE 0 END as is_saved,
    CASE WHEN ul.user_id IS NOT NULL THEN 1 ELSE 0 END as is_liked,
    u.id AS author_id, 
    u.username AS author_username, 
    u.email AS author_email,
    u.avatar AS author_avatar
FROM snippets s
LEFT JOIN user_likes ul ON s.id = ul.snippet_id AND ul.user_id = ?1
LEFT JOIN user_saves us ON s.id = us.snippet_id AND us.user_id = ?1
LEFT JOIN users u ON s.author = u.id
ORDER BY s.created_at DESC
`

type GetSnippetsRow struct {
	ID             string         `json:"id"`
	Title          string         `json:"title"`
	Language       string         `json:"language"`
	Content        string         `json:"content"`
	Author         string         `json:"author"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	Likes          int64          `json:"likes"`
	Views          int64          `json:"views"`
	IsSaved        int64          `json:"is_saved"`
	IsLiked        int64          `json:"is_liked"`
	AuthorID       sql.NullString `json:"author_id"`
	AuthorUsername sql.NullString `json:"author_username"`
	AuthorEmail    sql.NullString `json:"author_email"`
	AuthorAvatar   sql.NullString `json:"author_avatar"`
}

func (q *Queries) GetSnippets(ctx context.Context, userID string) ([]GetSnippetsRow, error) {
	rows, err := q.query(ctx, q.getSnippetsStmt, getSnippets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSnippetsRow{}
	for rows.Next() {
		var i GetSnippetsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Language,
			&i.Content,
			&i.Author,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Likes,
			&i.Views,
			&i.IsSaved,
			&i.IsLiked,
			&i.AuthorID,
			&i.AuthorUsername,
			&i.AuthorEmail,
			&i.AuthorAvatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSnippetsByAuthor = `-- name: GetSnippetsByAuthor :many
SELECT 
    s.id, s.title, s.language, s.content, s.author, s.created_at, s.updated_at, s.likes, s.views,
    CASE WHEN us.user_id IS NOT NULL THEN 1 ELSE 0 END as is_saved,
    CASE WHEN ul.user_id IS NOT NULL THEN 1 ELSE 0 END as is_liked,
    u.id AS author_id, 
    u.username AS author_username, 
    u.email AS author_email,
    u.avatar AS author_avatar
FROM snippets s
LEFT JOIN user_likes ul ON s.id = ul.snippet_id AND ul.user_id = ?1
LEFT JOIN user_saves us ON s.id = us.snippet_id AND us.user_id = ?1
LEFT JOIN users u ON s.author = u.id
WHERE s.author = ?2
ORDER BY s.created_at DESC
`

type GetSnippetsByAuthorParams struct {
	UserID   string `json:"user_id"`
	AuthorID string `json:"author_id"`
}

type GetSnippetsByAuthorRow struct {
	ID             string         `json:"id"`
	Title          string         `json:"title"`
	Language       string         `json:"language"`
	Content        string         `json:"content"`
	Author         string         `json:"author"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	Likes          int64          `json:"likes"`
	Views          int64          `json:"views"`
	IsSaved        int64          `json:"is_saved"`
	IsLiked        int64          `json:"is_liked"`
	AuthorID       sql.NullString `json:"author_id"`
	AuthorUsername sql.NullString `json:"author_username"`
	AuthorEmail    sql.NullString `json:"author_email"`
	AuthorAvatar   sql.NullString `json:"author_avatar"`
}

func (q *Queries) GetSnippetsByAuthor(ctx context.Context, arg GetSnippetsByAuthorParams) ([]GetSnippetsByAuthorRow, error) {
	rows, err := q.query(ctx, q.getSnippetsByAuthorStmt, getSnippetsByAuthor, arg.UserID, arg.AuthorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSnippetsByAuthorRow{}
	for rows.Next() {
		var i GetSnippetsByAuthorRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Language,
			&i.Content,
			&i.Author,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Likes,
			&i.Views,
			&i.IsSaved,
			&i.IsLiked,
			&i.AuthorID,
			&i.AuthorUsername,
			&i.AuthorEmail,
			&i.AuthorAvatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementViews = `-- name: IncrementViews :exec
UPDATE snippets
SET views = views + 1
WHERE id = ?1
`

func (q *Queries) IncrementViews(ctx context.Context, snippetID string) error {
	_, err := q.exec(ctx, q.incrementViewsStmt, incrementViews, snippetID)
	return err
}
const updateSnippet = `-- name: UpdateSnippet :one
UPDATE snippets
SET 
    title = ?1,
    content = ?2,
    language = ?3,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?4
RETURNING id, title, language, content, author, created_at, updated_at, likes, views
`

type UpdateSnippetParams struct {
	Title     string `json:"title"`
	Content   string `json:"content"`
	Language  string `json:"language"`
	SnippetID string `json:"snippet_id"`
}

func (q *Queries) UpdateSnippet(ctx context.Context, arg UpdateSnippetParams) (Snippet, error) {
	row := q.queryRow(ctx, q.updateSnippetStmt, updateSnippet,
		arg.Title,
		arg.Content,
		arg.Language,
		arg.SnippetID,
	)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Language,
		&i.Content,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Likes,
		&i.Views,
	)
	return i, err
}
