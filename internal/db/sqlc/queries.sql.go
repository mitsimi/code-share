// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    id,
    user_id,
    token,
    refresh_token,
    expires_at
) VALUES (
    ?, ?, ?, ?, ?
) RETURNING id, user_id, token, refresh_token, expires_at, created_at
`

type CreateSessionParams struct {
	ID           string `json:"id"`
	UserID       string `json:"user_id"`
	Token        string `json:"token"`
	RefreshToken string `json:"refresh_token"`
	ExpiresAt    int64  `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.queryRow(ctx, q.createSessionStmt, createSession,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const createSnippet = `-- name: CreateSnippet :one
INSERT INTO snippets (
    id,
    title,
    content,
    author
) VALUES (
    ?, ?, ?, ?
)
RETURNING id, title, content, author, created_at, updated_at, likes
`

type CreateSnippetParams struct {
	ID      string `json:"id"`
	Title   string `json:"title"`
	Content string `json:"content"`
	Author  string `json:"author"`
}

func (q *Queries) CreateSnippet(ctx context.Context, arg CreateSnippetParams) (Snippet, error) {
	row := q.queryRow(ctx, q.createSnippetStmt, createSnippet,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Author,
	)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Likes,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id,
    username,
    email,
    password_hash
) VALUES (
    ?, ?, ?, ?
) 
RETURNING id, username, email, password_hash, created_at, updated_at
`

type CreateUserParams struct {
	ID           string `json:"id"`
	Username     string `json:"username"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementLikesCount = `-- name: DecrementLikesCount :exec
UPDATE snippets 
SET likes = likes - 1 
WHERE id = ?
`

func (q *Queries) DecrementLikesCount(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.decrementLikesCountStmt, decrementLikesCount, id)
	return err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM sessions
WHERE expires_at < unixepoch()
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.exec(ctx, q.deleteExpiredSessionsStmt, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE token = ?
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.exec(ctx, q.deleteSessionStmt, deleteSession, token)
	return err
}

const deleteSnippet = `-- name: DeleteSnippet :exec
DELETE FROM snippets
WHERE id = ?
`

func (q *Queries) DeleteSnippet(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteSnippetStmt, deleteSnippet, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, token, refresh_token, expires_at, created_at FROM sessions
WHERE token = ? LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, token string) (Session, error) {
	row := q.queryRow(ctx, q.getSessionStmt, getSession, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSnippet = `-- name: GetSnippet :one
SELECT 
    s.id, s.title, s.content, s.author, s.created_at, s.updated_at, s.likes,
    CASE WHEN ul.user_id IS NOT NULL THEN 1 ELSE 0 END as is_liked,
    u.username as author_username
FROM snippets s
LEFT JOIN user_likes ul ON s.id = ul.snippet_id AND ul.user_id = ?
LEFT JOIN users u ON s.author = u.id
WHERE s.id = ?
`

type GetSnippetParams struct {
	UserID string `json:"user_id"`
	ID     string `json:"id"`
}

type GetSnippetRow struct {
	ID             string         `json:"id"`
	Title          string         `json:"title"`
	Content        string         `json:"content"`
	Author         string         `json:"author"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	Likes          int64          `json:"likes"`
	IsLiked        int64          `json:"is_liked"`
	AuthorUsername sql.NullString `json:"author_username"`
}

func (q *Queries) GetSnippet(ctx context.Context, arg GetSnippetParams) (GetSnippetRow, error) {
	row := q.queryRow(ctx, q.getSnippetStmt, getSnippet, arg.UserID, arg.ID)
	var i GetSnippetRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Likes,
		&i.IsLiked,
		&i.AuthorUsername,
	)
	return i, err
}

const getSnippets = `-- name: GetSnippets :many
SELECT 
    s.id, s.title, s.content, s.author, s.created_at, s.updated_at, s.likes,
    CASE WHEN ul.user_id IS NOT NULL THEN 1 ELSE 0 END as is_liked,
    u.username as author_username
FROM snippets s
LEFT JOIN user_likes ul ON s.id = ul.snippet_id AND ul.user_id = ?
LEFT JOIN users u ON s.author = u.id
ORDER BY s.created_at DESC
`

type GetSnippetsRow struct {
	ID             string         `json:"id"`
	Title          string         `json:"title"`
	Content        string         `json:"content"`
	Author         string         `json:"author"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	Likes          int64          `json:"likes"`
	IsLiked        int64          `json:"is_liked"`
	AuthorUsername sql.NullString `json:"author_username"`
}

func (q *Queries) GetSnippets(ctx context.Context, userID string) ([]GetSnippetsRow, error) {
	rows, err := q.query(ctx, q.getSnippetsStmt, getSnippets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSnippetsRow{}
	for rows.Next() {
		var i GetSnippetsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Author,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Likes,
			&i.IsLiked,
			&i.AuthorUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password_hash, created_at, updated_at FROM users
WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, created_at, updated_at FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hash, created_at, updated_at FROM users
WHERE username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.getUserByUsernameStmt, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementLikesCount = `-- name: IncrementLikesCount :exec
UPDATE snippets 
SET likes = likes + 1 
WHERE id = ?
`

func (q *Queries) IncrementLikesCount(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.incrementLikesCountStmt, incrementLikesCount, id)
	return err
}

const likeSnippet = `-- name: LikeSnippet :exec
INSERT OR IGNORE INTO user_likes (snippet_id, user_id)
VALUES (?, ?)
`

type LikeSnippetParams struct {
	SnippetID string `json:"snippet_id"`
	UserID    string `json:"user_id"`
}

func (q *Queries) LikeSnippet(ctx context.Context, arg LikeSnippetParams) error {
	_, err := q.exec(ctx, q.likeSnippetStmt, likeSnippet, arg.SnippetID, arg.UserID)
	return err
}

const unlikeSnippet = `-- name: UnlikeSnippet :exec
DELETE FROM user_likes
WHERE snippet_id = ? AND user_id = ?
`

type UnlikeSnippetParams struct {
	SnippetID string `json:"snippet_id"`
	UserID    string `json:"user_id"`
}

func (q *Queries) UnlikeSnippet(ctx context.Context, arg UnlikeSnippetParams) error {
	_, err := q.exec(ctx, q.unlikeSnippetStmt, unlikeSnippet, arg.SnippetID, arg.UserID)
	return err
}

const updateLikesCount = `-- name: UpdateLikesCount :exec
UPDATE snippets
SET likes = (
    SELECT COUNT(*)
    FROM user_likes
    WHERE snippet_id = ?
)
WHERE id = ?
`

type UpdateLikesCountParams struct {
	SnippetID string `json:"snippet_id"`
	ID        string `json:"id"`
}

func (q *Queries) UpdateLikesCount(ctx context.Context, arg UpdateLikesCountParams) error {
	_, err := q.exec(ctx, q.updateLikesCountStmt, updateLikesCount, arg.SnippetID, arg.ID)
	return err
}

const updateSessionExpiry = `-- name: UpdateSessionExpiry :exec
UPDATE sessions
SET expires_at = ?,
    refresh_token = ?
WHERE token = ?
`

type UpdateSessionExpiryParams struct {
	ExpiresAt    int64  `json:"expires_at"`
	RefreshToken string `json:"refresh_token"`
	Token        string `json:"token"`
}

func (q *Queries) UpdateSessionExpiry(ctx context.Context, arg UpdateSessionExpiryParams) error {
	_, err := q.exec(ctx, q.updateSessionExpiryStmt, updateSessionExpiry, arg.ExpiresAt, arg.RefreshToken, arg.Token)
	return err
}

const updateSnippet = `-- name: UpdateSnippet :one
UPDATE snippets
SET 
    title = ?,
    content = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, title, content, author, created_at, updated_at, likes
`

type UpdateSnippetParams struct {
	Title   string `json:"title"`
	Content string `json:"content"`
	ID      string `json:"id"`
}

func (q *Queries) UpdateSnippet(ctx context.Context, arg UpdateSnippetParams) (Snippet, error) {
	row := q.queryRow(ctx, q.updateSnippetStmt, updateSnippet, arg.Title, arg.Content, arg.ID)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Likes,
	)
	return i, err
}
