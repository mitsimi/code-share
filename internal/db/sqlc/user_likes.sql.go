// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_likes.sql

package db

import (
	"context"
)

const checkLikeExists = `-- name: CheckLikeExists :one
SELECT 1 as exists_flag
FROM user_likes 
WHERE snippet_id = ? AND user_id = ?
LIMIT 1
`

type CheckLikeExistsParams struct {
	SnippetID string `json:"snippet_id"`
	UserID    string `json:"user_id"`
}

func (q *Queries) CheckLikeExists(ctx context.Context, arg CheckLikeExistsParams) (int64, error) {
	row := q.queryRow(ctx, q.checkLikeExistsStmt, checkLikeExists, arg.SnippetID, arg.UserID)
	var exists_flag int64
	err := row.Scan(&exists_flag)
	return exists_flag, err
}

const decrementLikesCount = `-- name: DecrementLikesCount :exec
UPDATE snippets 
SET likes = likes - 1 
WHERE id = ?
`

func (q *Queries) DecrementLikesCount(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.decrementLikesCountStmt, decrementLikesCount, id)
	return err
}

const deleteLike = `-- name: DeleteLike :exec
DELETE FROM user_likes
WHERE snippet_id = ? AND user_id = ?
`

type DeleteLikeParams struct {
	SnippetID string `json:"snippet_id"`
	UserID    string `json:"user_id"`
}

func (q *Queries) DeleteLike(ctx context.Context, arg DeleteLikeParams) error {
	_, err := q.exec(ctx, q.deleteLikeStmt, deleteLike, arg.SnippetID, arg.UserID)
	return err
}

const incrementLikesCount = `-- name: IncrementLikesCount :exec
UPDATE snippets 
SET likes = likes + 1 
WHERE id = ?
`

func (q *Queries) IncrementLikesCount(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.incrementLikesCountStmt, incrementLikesCount, id)
	return err
}

const likeSnippet = `-- name: LikeSnippet :exec
INSERT INTO user_likes (snippet_id, user_id)
VALUES (?, ?)
`

type LikeSnippetParams struct {
	SnippetID string `json:"snippet_id"`
	UserID    string `json:"user_id"`
}

func (q *Queries) LikeSnippet(ctx context.Context, arg LikeSnippetParams) error {
	_, err := q.exec(ctx, q.likeSnippetStmt, likeSnippet, arg.SnippetID, arg.UserID)
	return err
}

const updateLikesCount = `-- name: UpdateLikesCount :exec
UPDATE snippets
SET likes = (
    SELECT COUNT(*)
    FROM user_likes
    WHERE snippet_id = ?
)
WHERE id = ?
`

type UpdateLikesCountParams struct {
	SnippetID string `json:"snippet_id"`
	ID        string `json:"id"`
}

func (q *Queries) UpdateLikesCount(ctx context.Context, arg UpdateLikesCountParams) error {
	_, err := q.exec(ctx, q.updateLikesCountStmt, updateLikesCount, arg.SnippetID, arg.ID)
	return err
}
