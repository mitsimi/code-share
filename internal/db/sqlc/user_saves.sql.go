// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_saves.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getSavedSnippets = `-- name: GetSavedSnippets :many
SELECT 
    s.id, s.title, s.language, s.content, s.author, s.created_at, s.updated_at, s.likes,
    CASE WHEN ul.user_id IS NOT NULL THEN 1 ELSE 0 END as is_liked,
    u.username as author_username
FROM snippets s
INNER JOIN user_saves us ON s.id = us.snippet_id
LEFT JOIN user_likes ul ON s.id = ul.snippet_id AND ul.user_id = ?
LEFT JOIN users u ON s.author = u.id
WHERE us.user_id = ?
ORDER BY s.created_at DESC
`

type GetSavedSnippetsParams struct {
	UserID   string `json:"user_id"`
	UserID_2 string `json:"user_id_2"`
}

type GetSavedSnippetsRow struct {
	ID             string         `json:"id"`
	Title          string         `json:"title"`
	Language       string         `json:"language"`
	Content        string         `json:"content"`
	Author         string         `json:"author"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	Likes          int64          `json:"likes"`
	IsLiked        int64          `json:"is_liked"`
	AuthorUsername sql.NullString `json:"author_username"`
}

func (q *Queries) GetSavedSnippets(ctx context.Context, arg GetSavedSnippetsParams) ([]GetSavedSnippetsRow, error) {
	rows, err := q.query(ctx, q.getSavedSnippetsStmt, getSavedSnippets, arg.UserID, arg.UserID_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSavedSnippetsRow{}
	for rows.Next() {
		var i GetSavedSnippetsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Language,
			&i.Content,
			&i.Author,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Likes,
			&i.IsLiked,
			&i.AuthorUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveSnippet = `-- name: SaveSnippet :exec
INSERT OR IGNORE INTO user_saves (snippet_id, user_id)
VALUES (?, ?)
`

type SaveSnippetParams struct {
	SnippetID string `json:"snippet_id"`
	UserID    string `json:"user_id"`
}

func (q *Queries) SaveSnippet(ctx context.Context, arg SaveSnippetParams) error {
	_, err := q.exec(ctx, q.saveSnippetStmt, saveSnippet, arg.SnippetID, arg.UserID)
	return err
}

const unsaveSnippet = `-- name: UnsaveSnippet :exec
DELETE FROM user_saves
WHERE snippet_id = ? AND user_id = ?
`

type UnsaveSnippetParams struct {
	SnippetID string `json:"snippet_id"`
	UserID    string `json:"user_id"`
}

func (q *Queries) UnsaveSnippet(ctx context.Context, arg UnsaveSnippetParams) error {
	_, err := q.exec(ctx, q.unsaveSnippetStmt, unsaveSnippet, arg.SnippetID, arg.UserID)
	return err
}
