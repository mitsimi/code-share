// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createSnippetStmt, err = db.PrepareContext(ctx, createSnippet); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSnippet: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteSnippetStmt, err = db.PrepareContext(ctx, deleteSnippet); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSnippet: %w", err)
	}
	if q.getSnippetStmt, err = db.PrepareContext(ctx, getSnippet); err != nil {
		return nil, fmt.Errorf("error preparing query GetSnippet: %w", err)
	}
	if q.getSnippetsStmt, err = db.PrepareContext(ctx, getSnippets); err != nil {
		return nil, fmt.Errorf("error preparing query GetSnippets: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.likeSnippetStmt, err = db.PrepareContext(ctx, likeSnippet); err != nil {
		return nil, fmt.Errorf("error preparing query LikeSnippet: %w", err)
	}
	if q.unlikeSnippetStmt, err = db.PrepareContext(ctx, unlikeSnippet); err != nil {
		return nil, fmt.Errorf("error preparing query UnlikeSnippet: %w", err)
	}
	if q.updateLikesCountStmt, err = db.PrepareContext(ctx, updateLikesCount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateLikesCount: %w", err)
	}
	if q.updateSnippetStmt, err = db.PrepareContext(ctx, updateSnippet); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSnippet: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createSnippetStmt != nil {
		if cerr := q.createSnippetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSnippetStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteSnippetStmt != nil {
		if cerr := q.deleteSnippetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSnippetStmt: %w", cerr)
		}
	}
	if q.getSnippetStmt != nil {
		if cerr := q.getSnippetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSnippetStmt: %w", cerr)
		}
	}
	if q.getSnippetsStmt != nil {
		if cerr := q.getSnippetsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSnippetsStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.likeSnippetStmt != nil {
		if cerr := q.likeSnippetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing likeSnippetStmt: %w", cerr)
		}
	}
	if q.unlikeSnippetStmt != nil {
		if cerr := q.unlikeSnippetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unlikeSnippetStmt: %w", cerr)
		}
	}
	if q.updateLikesCountStmt != nil {
		if cerr := q.updateLikesCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateLikesCountStmt: %w", cerr)
		}
	}
	if q.updateSnippetStmt != nil {
		if cerr := q.updateSnippetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSnippetStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                    DBTX
	tx                    *sql.Tx
	createSnippetStmt     *sql.Stmt
	createUserStmt        *sql.Stmt
	deleteSnippetStmt     *sql.Stmt
	getSnippetStmt        *sql.Stmt
	getSnippetsStmt       *sql.Stmt
	getUserStmt           *sql.Stmt
	getUserByUsernameStmt *sql.Stmt
	likeSnippetStmt       *sql.Stmt
	unlikeSnippetStmt     *sql.Stmt
	updateLikesCountStmt  *sql.Stmt
	updateSnippetStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		createSnippetStmt:     q.createSnippetStmt,
		createUserStmt:        q.createUserStmt,
		deleteSnippetStmt:     q.deleteSnippetStmt,
		getSnippetStmt:        q.getSnippetStmt,
		getSnippetsStmt:       q.getSnippetsStmt,
		getUserStmt:           q.getUserStmt,
		getUserByUsernameStmt: q.getUserByUsernameStmt,
		likeSnippetStmt:       q.likeSnippetStmt,
		unlikeSnippetStmt:     q.unlikeSnippetStmt,
		updateLikesCountStmt:  q.updateLikesCountStmt,
		updateSnippetStmt:     q.updateSnippetStmt,
	}
}
